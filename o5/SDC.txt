import numpy as np 
first_array=np.array([1,3,5,7])
second_array=np.array([2,4,6,8])
# using the + operator
result1=first_array+second_array
print("using the + operator:",result1)
#using the add() funcation
result2=np.add(first_array,second_array)
print("using the add() funcation:",result2)
import numpy as np 
first_array=np.array([3,9,27,81])
second_array=np.array([2,4,8,16])
# using the - operator
result1=first_array-second_array
print("using the - operator:",result1)
#using the subtract() funcation
result2=np.subtract(first_array,second_array)
print("using the subtract() 








import numpy as np 
first_array=np.array([8,12,64,32])
second_array=np.array([2,4,8,16])
# using the / operator
result1=first_array/second_array
print("using the /operator:",result1)
#using the divide() funcation
result2=np.divide(first_array,second_array)
print("using the divide() funcation:",result2)



import numpy as np 
first_array=np.array([8,12,64,32])
second_array=np.array([2,4,8,16])
# using the * operator
result1=first_array*second_array
print("using the * operator:",result1)
#using the multiply() funcation
result2=np.multiply(first_array,second_array)
print("using the multiply() funcation:",result2)


import numpy as np 
first_array=np.array([8,2,64,32])
second_array=np.array([2,4,8,16])
# using the * operator
result1=first_array**second_array
print("using the * operator:",result1)
#using the multiply() funcation
result2=np.power(first_array,second_array)
print("using thepower() funcation:",result2)


import numpy as np 
first_array=np.array([8,2,64,32])
second_array=np.array([2,4,8,16])
# using the * operator
result1=first_array%second_array
print("using the * operator:",result1)
#using the multiply() funcation
result2=np.mod(first_array,second_array)
print("using the mod() funcation:",result2)

****ARRAY FUNCTION****
import numpy as np
#create an array using np.array
array1=np.array([1,3,5])
print("np.array():\n",array1)
#create an aray filled with 0 usin np.zeros()
array2=np.zeros((3,3))
print("\nnp.zeros():\n",array2)

#create an array filled with ones
array3=np.ones((2,4))
print("\nnp.ones():\n",array3)

#create a 1d array
array4=np.array([1,3,5,7,9,11])

#reshape the 1d array into 2d array
array5=np.reshape(array4,(2,3))

#transpose the  2d array
array6=np.transpose(array5)

print("original array:\n",array4)
print("\nreshaped array\n",array5)
print("\n transposearray:\n",array6)


****LOGICAL OPERATOR*****
import numpy as np 
array1=np.array([1,2,3])
array2=np.array([3,2,1])

#less than operator
result1=array1<array2
print("array1<array2:",result1)#output true or False

#greater than operator
result2=array1>array2
print("array1>array2:",result2)#output true or false
result=np.less_equal(array1,array2)
print("using less_equal:",result)
26/7/24

import numpy as np 
x1=np.array([True,False,True])
x2=np.array([False,False,True])
#logical operator
print (np.logical_and(x1,x2))# out put[False False True]
# logical or
print(np.logical_or(x1,x2))#out put[True False True]
#logical not
print(np.logical_not(x1))# out put[False True False]

#rounding function
import numpy as np 
number=np.array([1.23456,2.34567,3.45678,4.56789])
#round the array to two decimal palces
rounded_array=np.round(number,2)
print(rounded_array)
array1=np.array([1.23456,2.3456,3.45678,4.56789])
print("array after floro():",np.floor(array1))
print("array after ceil():",np.ceil(array1))



*****MEDIAN******
import numpy as np
array1=np.array([[2,4,6],
                [8,10,12],
                [14,16,18]])
#compute median along horizontal axis
result1=np.median(array1,axis=1)
print("median along with horizntal axis:",result1)

#compute median along vertical axis
result2=np.median(array1,axis=0)
print("median along with vertical axis:",result2)

#compute median of entire array
result3=np.median(array1)
print("median of entire array:",result3)

*****STANDARD DEVIATION***
import numpy as np
array1=np.array([[2,4,6],
                [8,10,12],
                [14,16,18]])
#compute std along horizontal axis
result1=np.std(array1,axis=1)
print("standard deviation along with horizntal axis:",result1)

#compute std along vertical axis
result2=np.std(array1,axis=0)
print("standard deviation along with vertical axis:",result2)

#compute std of entire array
result3=np.std(array1)
print("standard deviation of entire array:",result3)

***string function***
import numpy as np 
array1=np.array(['iphone','price:'])
array2=np.array(['15','$900'])
#perform element -wise array string concatination
result=np.char.add(array1,array2)
print(result)

out put:['iphone:15' 'price:$900']


****CASE****
import numpy as np 
#define array with three string element
array1=np.array(['A','B','C'])
# repeat each element in array1 two times
result=np.char.multiply(array1,2)
print(result)
#define an array with three string element
array1=np.array(['eric','paul','sean'])
#capitalize the first letter of each string in array
result=np.char.capitalize(array1)
print(result)
array1=np.array(['nEpalI','AmeriCAN','CaNadIan'])
#convert all string element to uppercase
result1=np.char.upper(array1)
#convert all string element to lowercase
result2=np.char.lower(array1)
print(" To UPPERCASE:",result1)
print("To lowercase:",result2)


Output:

['AA' 'BB' 'CC']
['Eric' 'Paul' 'Sean']
 To UPPERCASE: ['NEPALI' 'AMERICAN' 'CANADIAN']
To lowercase: ['nepali' 'american' 'canadian']


**** creating &indexing****

import numpy as np 

arr=np.array([1,2,3,4])
print(" FIRST ELEMENT OF ARRAY IS:",arr[0])
print("sum of 2 elements of aaray is:",arr[2]+arr[3])

Output:

 FIRST ELEMENT OF ARRAY IS: 1
sum of 2 elements of aaray is: 7
****SLICING ARRAY****

import numpy as np 

arr=np.array([1,2,3,4,5,6,7])
print("SLICiNG THE ELEMENT FROM 1 TO 4:", arr[1:5])
print("SLICiNG THE ELEMENT FROM 4 TO END:", arr[4:])
print("SLICiNG THE ELEMENT FROM STRAT TO 3:", arr[:4])



Output:

SLICiNG THE ELEMENT FROM 1 TO 4: [2 3 4 5]
SLICiNG THE ELEMENT FROM 4 TO END: [5 6 7]
SLICiNG THE ELEMENT FROM START TO 3: [1 2 3 4]

2/8/24

import matplotlib.pyplot as plt
# creating plot
plt.plot([1,2,3,4],[10,20,25,30])
# customizing  axis limits and abels
plt.xlim(0,5)
plt.ylim(0,35)
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.title('Sample plot')
plt.show()

****sign wave plot***

from matplotlib import pyplot as plt
impotr numpy as np
import math 
#needed for defination of pi
x=np.arange(0,math.pi*2,0.05)
y=np.sin(x)
#print(x)
#print(y)
plt.plot(x,y)
plt.xlabel("angel")
plt.ylabel('sine')
plt.title('sine wave')
plt.show()

REFARENCE CODE
import numpy as np
x=np.arange(0,10,1)
y=3*x;
print(x)
print(y)

****matplot -LEGENDS****

import matplotlib.pyplot as plt
#example data 
year=[1,2,3]
veg_Rate=[2,4,6]
Milk_Rate=[1,3,5]
Fruit_Rate=[3,6,9]
#ploting the data
line1,=plt.plot(year,veg_Rate)
line2,=plt.plot(year,Milk_Rate)
line3,=plt.plot(year,Fruit_Rate)
#calling legend with explicitly listed artists and labels
plt.legend([line1, line2, line3,],['vegtable','milk','fruit'])
plt.xlabel('years')
plt.ylabel('rate')
#show the plot
plt.show()
print('Successfully placed a legend on the Axis')

**VERTICAL BAR CHART****

import matplotlib.pyplot as plt
categories=['lion','horse','kangaroo']
values=[15,24,30]
plt.bar(categories,values,color='skyblue')
plt.xlabel('Categories')
plt.ylabel('values')
plt.title('Basic Vertical Bar Graph')
plt.show()


****one mor exmple for barh****
import matplotlib.pyplot as plt
categories=['ferrai','Benz','honda']
values=[40,28,35]
plt.barh(categories,values,color=['greeon','orange','pink'])

plt.xlabel('Distance covered/km')
plt.ylabel('car name')
plt.title('Car race')
plt.show()

***GROUP BARCHART***

import matplotlib.pyplot as plt
import numpy as np
#defining categories and their corresponding values for 
categories=['lion','horse','kangaroo']
values1=[15,24,30]
values2=[20,18,25]
#setting the width of bars
bar_width=0.5
#calculating bar position for both group
bar_position1=np.arange(len(categories))
bar_position2=np.positions1+bar_width
#creating the first of bar(group 1)
plt.bar(bar_position1,values1,width=bar_width,label='2021',color='skyblue')
#creating the second of bars(group 2) next to first set
plt.bar(bar_position2,values2,width=bar_width,label='2022',color='yellow')
#adding labels to the axes
plt.xlabel('categories')
plt.ylabel('values')
#adding the title of the group
plt.title('grouped bar for graph')
#displaying the legend to identify the group
plt.legend()
#showing the plot
plt.show()


7/8/24
**** STACKED BAR GRAPH****

import matplotlib.pyplot as plt
#defining categries and values for two group
categories=['transport','income tax','house rent']
values1=[15,24,30]
values3=[20,18,25]
#creatind the first set of bars(group 1) without any offset
plt.bar(categories,values1,label='first half',color='skyblue')
#creating the second set of bar(group 2)plotted with
#this makes  group2 bars stacked on the top of group ! bars
plt.bar(categories,values3,bottom=values1,label='second half', color='yellow')
#adding labels to the axes
plt.xlabel('categories')
plt.ylabel('values')
plt.title('stacked bar grapg')
plt.legend()
plt.show()

****HISTOGRAM****

import matplotlib.pyplot as plt 
x=[70,50,100,70,50,100,50,50,50,70,50]
plt.hist(x,orientation="vertical")
plt.title('MARK  ANALYSIS')
plt.ylabel(' no of students')
plt.xlabel('marks')
plt.show()

****CUMULATIVE HISTOGRAM****

import matplotlib.pyplot as plt 
import numpy as np 
#genatrate  random exam scores (out of 100)
exam_scores=np.random.randint(0,100,50)
#create a cumulative histogram
plt.hist(exam_scores,bins=20,cumulative=True,color='pink',edgecolor='black')
plt.xlabel('exam scores')
plt.ylabel('cumulative number of students')
plt.title('cumulative histogram of exam scores')

****STACKED HISTOGRAM WITH MULTIPLE DATA SET ********

import matplotlib.pyplot as plt
import numpy as np 
#sample data for two dataset
marks1=np.array([2,4,5,7,9,10,11,13,14,15])
marks2=np.array([6,7,8,10,11,12,13,14,15,16])
#crating a stacked histogram with diffwrent colors
plt.hist([marks1,marks2],bins=10,stacked=True,color=['skyblue','salmon'],edgecolor='black')
plt.xlabel('marks')
plt.ylabel('count')
plt.title('stacked histogram with multiple datasets ')
plt.legend('mark dataset 1','mark dataset 2')
plt.show()


9/8/24
****  PANDAS ******

import pandas as pd 
#series genarated from a list
a=[1,7,2]
myvar=pd.Series(a)
print(1)
print(myvar)
print('----------')
#labels
print(myvar[10])
print('____---------')
#assingning separate labels to values in the Series
myvar2=pd.Series(a,index=["x","y","z"]
print(myvar2)
print(myvar2["y"])
print('-----------')
#series generated from Dictionary
calories={"day1":420,"day2":380,"day3":390}
myvar=pd.Series(calories)
print(myvar)
print('--------------')
myvar=pd.Series(calories,index=["day1","day2"])
print(myvar)
print('-----------')
#series genarated from scaler value
series=pd.Series(5,index=[0,1,2,3])
print(series)
print('----------')

#integer series
int_series=pd.Series([1,2,3,4])
print(int_series)
print('------')
#float Series
float_series=pd.Series([1.1,2.2,3.3,4.4])
print(float_series)
print('---------')
#string series
string_series=pd.Series(['a','b','c','d'])
print(string_series)
print('-------------')
#label -based indexing 
data={'a':10,'b':20,'c':30}
series=pd.Series(data)
print(series['a'])
print(series[['a','c']])
print('---------------')
# boolean indexing
data=[10,20,30,40,50]
series=pd.Series(data)
#access element greater than 25
print(series[series>25])
print('------------')


****CREATING DATA FRAME****
data={
  'name':['Alice','Bob','Charli'],
'Age':[25,30,35],
'City':['New York','Los Angeles','Chicago']
}
df=pd.DataFrame(data)
print(df)
print('--------')
#selecting Columns
print(df.Name)
print(df['name'])
print(df[['name','City']])
print('---------')
#### row wise slicing

df=pd.DataFrame(data)
#select a single row by label
print(df.loc[0])
print(df.iloc[0])
#selet multiple rows
print(df.iloc[0:2])
print('--------')

#conditional selection
#selection rows where age is greater then 25
print(df[df['Age']>25])
print('--------------')
print(df.loc[(df.Name=='Bob')&(df.City=='Los Angeles)])


*******GROUPBY IN PANDAS****

#Grouping by single column
data={
'name':['Alice','Bob','Charlie','Alice','Bob'],
 'age':[25,30,35,25,30],
  'city':['New York','San Francisco','Los  Angels','New York','San Francisco'],
 'salary':[70000,80000,120000,70000,80000]}
df=pd.DataFrame(data)
grouped=df.groupby('name')
print(grouped.groups)
#calculate the sum of salaries for each group
salary_sum=grouped['salary'].sum()
print(salary_sum)
age_mean=grouped['age'].mean()
print(age_mean)

#grouping by multiple collumns
3group by 'name' and 'city'
grouped_multiple=df.groupby(['name','city'])
#calculate the sum of  salaries for each group
salary_sum_multiple=grouped_multiple['salary'].sum()
print(salary_sum_multiple)

14/8/24
**** DATA FRAME CONCATENATION ********
JOIN(),concat()

import pandas as pd
#define a dictionary containing employee data
data1={'Name':['Jai','Princi','Gaurav','Anuj'],
       'Age':[27,24,22,32],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Msc','MA','MCA','Phd']}
       #define a dictionary containing employee data
 data2={'Name':['Abhi','Ayushi','Dhiraj','Hitesh'],
       'Age':[17,14,12,52],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Btech','B.A','Bcom','B.hons']
     
 }      
 #convert the dictionary into data frame
 df=pd.DataFrame(data1,index=[0,1,2,3])
 #conver the dictionary into dataFrame
 df1=pd.DataFrame(data2,index=[2,3,6,7])
print(df,"\n\n",df1)
#using a .concat() method
res1=pd.concat([df,df1])
res1
#appying concat with axes
#join='inner' we get the intersection of dataframe
res2=pd.concat([df1,df2],axis=1,join'inner')
res2

EX-2

import pandas as pd
#define a dictionary containing employee data
data1={'Name':['Jai','Princi','Gaurav','Anuj'],
       'Age':[27,24,22,32],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Msc','MA','MCA','Phd']}
       #define a dictionary containing employee data
 data2={'Name':['Abhi','Ayushi','Dhiraj','Hitesh'],
       'Age':[17,14,12,52],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Btech','B.A','Bcom','B.hons']
     
 }      
 #convert the dictionary into data frame
 df=pd.DataFrame(data1,index=[0,1,2,3])
 #conver the dictionary into dataFrame
 df1=pd.DataFrame(data2,index=[4,5,6,7])
print(df,"\n\n",df1)
#using a .concat() method
res1=pd.concat([df,df1])
res1

****  concating DATAFRAME BY IGNORING INDEXES *****

import pandas as pd
#define a dictionary containing employee data
data1={'Name':['Jai','Princi','Gaurav','Anuj'],
       'Age':[27,24,22,32],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Msc','MA','MCA','Phd']}
       #define a dictionary containing employee data
 data2={'Name':['Abhi','Ayushi','Dhiraj','Hitesh'],
       'Age':[17,14,12,52],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Btech','B.A','Bcom','B.hons']
     
 }      
 #convert the dictionary into data frame
 df=pd.DataFrame(data1,index=[0,1,2,3])
 #conver the dictionary into dataFrame
 df1=pd.DataFrame(data2,index=[2,3,6,7])
print(df,"\n\n",df1)
#using ignore_index
res=pd.concat([df,df1],ignore_index=True)
res

**** CONCAT A MIX OF SERIES AND DATAFRAME **********

#IMPORT PANDAs module
import pandas as pd
#define a dictionary concating empoyee data
data1={'Name':['Jai','Princi','Gaurav','Anuj'],
       'Age':[27,24,22,32],
       'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Msc','MA','MCA','Phd']}
 # convert the dictionary into DataFrame
 df=pd.DataFrame(data1,index=[0,1,2,3])
 #creating a Series and dataFrame
 s1=pd.Series([1000,2000,3000,4000],name='Salary')
 print(df,"\n\n",s1) 
 #combing series and dataframe
 res=pd.concat([df,s1],axis=1)
    

**** MERGING A DATAFRAME WITH AND  UNIQ  *****

import pandas as pd 
#defining a dictionary containg employee data
data1={'Key':['k0','k1','k2','k3'],
    'Name':['Jai','Princi','Gaurav','Anuj'],
    'Age':[27,24,22,32]
}
#defining a dictionary containing employee data
 data2={'Key':['k0','k1','k2','k3'],
        'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Btech','B.A','Bcom','B.hons']
     
        }
  #converting the dictionary into dataframe
  df=pd.DataFrame(data1)
  #convert the dictionary to dataframe
  df1=pd.DataFrame(data2)
  print(df,"\n\n",df1)
  #using .merge() function
  res=pd.merge(df,df1,on='Key')  
  res    
******MERGING DATAFRAME WIYH MULTIPLE KEY VALUES ****

import pandas as pd
data1={'Key':['k0','k1','k2','k3'],
       'Key1':['k0','k1','k0','k1'],
    'Name':['Jai','Princi','Gaurav','Anuj'],
    'Age':[27,24,22,32]
}
#define dictionary containg employee data
data2={'Key':['k0','k1','k2','k3'],
        'Key1':['k0','k1','k0','k1'],
        'Address':['Nagpur','kanpur','Allahabad','Kannuaj'],
       'Qualification':['Btech','B.A','Bcom','B.hons']
     
        }
        #convert the dictionary to dataframe
        df=pd.DataFrame(data1)
        #convert the dictionary into dataFrame
        df1=pd.DataFrame(data2)
        print(df,"\n\n",df1)
        #  using .merge() dataframe using multiple key
        res1=pd.merge(df,df1,on=['Key','Key1'])
        res1

****17/8/24  MERG(INNER,OUTER,LEFT,RIGHT) ***

import pandas as pd
df1={
    'name':['hari','ram'],
    'age':[24,25],
    'city':['ongole','chirala'],
    'address':['inkollu','pavuluru'],
    'email':['hari@12','ram@32']
}
df2={
    'name':['alice','ram'],
    'age':[24,35],
    'city':['ongole','inkollu'],
    'address':['peta','pavuluru'],
    'email':['alicee@12','ram@12']
}
data1=pd.DataFrame(df1,index=[0,1])
print(data1)
data2=pd.DataFrame(df2,index=[2,3])
print(data2)
print("\n\n")
op=pd.merge(data1,data2,on='city')
print(op)
print("\n\n")
op1=pd.merge(data1,data2,on='city',how='outer')
print(op1)
print("\n\n")
op2=pd.merge(data1,data2,on='city',how='left')
print(op2)
print("\n\n")
op3=pd.merge(data1,data2,on='city',how='right') 
print(op3)
print("\n\n")



output:
   name  age     city   address    email
0  hari   24   ongole   inkollu  hari@12
1   ram   25  chirala  pavuluru   ram@32
    name  age     city   address      email
2  alice   24   ongole      peta  alicee@12
3    ram   35  inkollu  pavuluru     ram@12



  name_x  age_x    city address_x  email_x name_y  age_y address_y    email_y
0   hari     24  ongole   inkollu  hari@12  alice     24      peta  alicee@12


  name_x  age_x     city address_x  email_x name_y  age_y address_y    email_y
0   hari   24.0   ongole   inkollu  hari@12  alice   24.0      peta  alicee@12
1    ram   25.0  chirala  pavuluru   ram@32    NaN    NaN       NaN        NaN
2    NaN    NaN  inkollu       NaN      NaN    ram   35.0  pavuluru     ram@12



  name_x  age_x     city address_x  email_x name_y  age_y address_y    email_y
0   hari     24   ongole   inkollu  hari@12  alice   24.0      peta  alicee@12
1    ram     25  chirala  pavuluru   ram@32    NaN    NaN       NaN        NaN


  name-left  age-left     city address-left email-left name-right  age-right  \
0      hari      24.0   ongole      inkollu    hari@12      alice         24   
1       NaN       NaN  inkollu          NaN        NaN        ram         35   

  address-right email-right        True  
0          peta   alicee@12        both  






1      pavuluru      ram@12  right_only  




#case study -state Electricity
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from pandas import read_csv
path="/content/drive/MyDrive/energy.csv"
electricity=pd.read_csv(path)
print(electricity)
print(electricity.shape)
print(electricity.head(5))
print(electricity.tail(4))
print(electricity.info())
print(electricity.describe())
print("Column Data")
print(electricity.columns)
print(electricity[electricity['State'].str.startswith('M')])
print(electricity[electricity['State'].str.endswith('a')])
rcb=elecricity[electricity['State']=='Andhra']
print(len(rcb))
cb=elecricity[electricity['State']=='Manipure']
print(len(cb))
print(electricity.sort_values(by='State'))
print(np.max(electricity['Consumption']))
print(np.min(electricity['Consumption']))
print(np.mean(electricity['Consumption']))
#print max unit for Andhra
print(electricity[electricity['State']=='Andhra']['Consumption'].max())
print(electricity[electricity['State']=='Andhra']['Consumption'].min())
#state _data=electricity[electricity['State']=='Andhra"]
state1_data=electricity[electricity.State=='Andhra']
print(state1_data)
state2_data=electricity[electricity['State']=='Karnataka']

state4_data=electricity[electricity['State']=='Telengana']
state5_data=electricity[electricity['State']=='Tripuram']
#line chart
fig,axes=plt.subplots(2)
axes[0].plot(state1_data['Date'],state1_data['Consumption'],marker='*',color='red')

axes[1].plot(state1_data['Date'],state1_data['Consumption'],marker='*',color='blue')

#bar chart
fig1,axes1=plt.subplots(2)

axes[0].bar(state1_data['Date'],state1_data['Consumption'],marker='*',color='red')

axes[1].bar(state1_data['Date'],state1_data['Consumption'],marker='*',color='blue')









import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from pandas import read_csv
path="/content/drive/MyDrive/energy.csv"
electricity=pd.read_csv(path)
print(type(electricity))
print(electricity)
print(electricity.shape)
print(electricity.head(5))
print(electricity.tail(4))
print(electricity.info())
print(electricity.describe())
print("Column Data")
print(electricity.columns)
print(electricity[electricity['State'].str.startswith('M')])
print(electricity[electricity['State'].str.endswith('a')])
rcb=elecricity[electricity['State']=='Andhra']
print(len(rcb))
cb=elecricity[electricity['State']=='Manipure']
print(len(cb))
print(electricity.sort_values(by='State'))
print(np.max(electricity['Consumption']))
print(np.min(electricity['Consumption']))
print(np.mean(electricity['Consumption']))
#print max unit for Andhra
print(electricity[electricity['State']=='Andhra']['Consumption'].max())
print(electricity[electricity['State']=='Andhra']['Consumption'].min())
#state _data=electricity[electricity['State']=='Andhra"]
state1_data=electricity[electricity.State=='Andhra']
print(state1_data)
state2_data=electricity[electricity['State']=='Karnataka']

state4_data=electricity[electricity['State']=='Telengana']
state5_data=electricity[electricity['State']=='Tripuram']
#line chart
fig,axes=plt.subplots(2)
axes[0].plot(state1_data['Date'],state1_data['Consumption'],marker='*',color='red')

axes[1].plot(state1_data['Date'],state1_data['Consumption'],marker='^',color='blue')

#bar chart
fig1,axes1=plt.subplots(2)

axes[0].bar(state1_data['Date'],state1_data['Consumption'],marker='*',color='red')

axes[1].bar(state1_data['Date'],state1_data['Consumption'],marker='^',color='blue')
#pie chart
fig2,axes2=plt.subplots(2)
state1='UP'
state2='Kerala'
state3='Mizoram'
state4='Delhi'
labels=[state1.state2]
state1_total=electricity[electricity['State']==state1]['Consumption'].sum()
state1_total=electricity[electricity['State']==state2]['Consumption'].sum()

#'energy' should be a list of numerical values
energy=[state1_total,state2_total]
axes2[0].pie(energy,labels=labels,autopct='%1.1f%%')

labels=[state3.state4]
state1_total=electricity[electricity['State']==state3]['Consumption'].sum()
state1_total=electricity[electricity['State']==state4]['Consumption'].sum()

#'energy' should be a list of numerical values
energy=[state3_total,state4_total]
axes2[0].pie(energy,labels=labels,autopct='%1.1f%%')




#subplot
import matplotlib.pyplot as plt
#creating a 2
x2 gid of subplots
fig,ax=plt.subplots(1,4)
#Accessing individual axes (subplot)
ax[0].plot([1,2,3],[4,5,6])#plot in the first subplot
ax[1].scatter([1,2,3],[4,5,6])#second subplot
ax[2].bar([1,2,3],[4,5,6])#third plot
ax[3].hist([1,2,3,4,4,4,4,5,5,5],color='red')
plt.show()



#subplot
import matplotlib.pyplot as plt
#creating a 2x2 gid of subplots
fig,ax=plt.subplots(2,2)
#Accessing individual axes (subplot)
ax[0,0].plot([1,2,3],[4,5,6])#plot in the first subplot
ax[0,1].scatter([1,2,3],[4,5,6])#second subplot
ax[1,0].bar([1,2,3],[4,5,6])#third plot
ax[1,1].hist([1,2,3,4,4,4,4,5,5,5],color='red')
plt.show()


cleaning the data

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
from pandas import read_csv
path="/content/drive/MyDrive/rawdata.csv"
df=pd.read_csv(path)
new_df=df.dropna()
print(new_df.to_string())
print(new_df)

#REPLACE EMPTY VALUES
new_df=df.fillna(130)
print(new_df.to_string())
#df.fillna(130,inplace=True)
 #REPLACE ONLY FOR SPECIFIED COLUMNS

new_df=df["Calories"].fillna(130);
print(new_df.to_string())
#df["Calories"].fillna(130,inplace=True)

new_df=df["Duration"].fillna(100);
print(new_df.to_string())
#df["Duration"].fillna(100,inplace=True)

#REPLACE USING MEAN,MEDIAN,MODE

x=df["Duration"].mean()
new_df=df["Duration"].fillna(x);
print(new_df.to_string())
#df["Duration"].fillna(x,inplace=True)


y=df["Pulse"].median()
new_df=df["Pulse"].fillna(y);
print(new_df.to_string())
#df["Pulse"].fillna(y,inplace=True)

y=df["Maxpulse"].mode()[0]
new_df=df["Maxpulse"].fillna(z);
print(new_df.to_string())
#df["maxpulse"].fillna(z,inplace=True)

#FIXING WRONG DATA

df.loc[7,'Duration']=45
print(df.to_string())
#LOOP THROUGH ALL VALUES IN THE "DURATION" COLUMN

for x in df.index:
 if df.loc[x,"Duration"]>120:
   df.loc[x,"Duration"]=120
print(df.to_string())

SEABORN
#import package
import pandas as pd
import seaborn as sb
from matplotlib import pyplot as plt
#loading dataset using seaborn
d=sd.load_dataset('tips')
#df.head()
print(df.to_string())
g=sd.FacetGrid(df,col="time")
g.map(plt.hist,"tip")
plt.show()

g=sd.FacetGrid(df,col="day")
g.map(plt.hist,"tip")

g=sd.FacetGrid(df,col="sex")
g.map(plt.hist,"tip")

g=sb.FacetGrid(df,col="sex",hue="smoke")
g.map(plt.scatter,"total_bill","tip")
plt.show()

g=sb.FacetGrid(df,col="day",hue="smoke")
g.map(plt.scatter,"total_bill","tip")
plt.show()

g=sb.FacetGrid(df,col="time",hue="smoke")
g.map(plt.scatter,"total_bill","tip")
plt.show()

g=sb.FacetGrid(df,col="time",hue="sex")
g.map(plt.scatter,"total_bill","tip")
plt.show()

#STATISTICAL ESTIMATION

sb.barplot(x="sex",y="tip",hue="time",data=df)
plt.show()

sb.barplot(x="sex",y="tip",hue="day",data=df)
plt.show()

#LINEAR RELATIONSHIP
sd.regplot(x="total_bill",y="tip",data=df)
plt.show()

#### PAIR PLOT

seaborn.pairplot(df)
plt.show()

#PAIRPLOT SEABORN:PLOTTING SELECTED VARIABLES

selected_var=['total_bill','tip']
sb.pairplot(df,vars=selected_var)
plt.show()

#ADDING A HUE COLOR TO SEABORN PAIRPLOT

sb.pairplot(df,hue='size')
plt.show()

sb.pairplot(df,hue="size",palette="hus1")
plt.show()

#DIAGONAL KIND OF PLOTS

sb.pairpolt(df,diag_kind='kde')
plt.show()

ADJUSTING PLOT KIND

sb.pairplot(df,kind='reg')
plt.show()

CONTROLLING THE MARKERS

sb.pairplot(df,hue='sex',markers=["o","s"])
plt.show()

#ADVANCED CUSTOMIZATION WITH SEABORN PAIRPLOT

g=sb.pairplot(df,hue='day')
g.fig.suptitle("pairplot of tips Dataset",y=1.02)
g.set(xtricks=[].ytricks[])#remove the trick label

plt.show()


CASE-STUDY-PATIENTDATASET

import numy as np 
#linear algebra
import pandas as pd
#3data  processing ,csv file i/o(
import matplotlib.pyplot as plt
import seaborn as sns;
df=pd.read_csv("/content/drive/MyDrive/heart.csv")
df.head()



#sns.set_style("whitegrid")
plt.figure(figsize=(18,10))
sns.distplo